eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6DQogIHByZS1wcm9jZXNzOg0KICAgIGltYWdlOiBidWlsZGVyOmxhdGVzdA0KICAgIHdoZW46DQogICAgICBldmVudDoNCiAgICAgICAgLSBwdXNoDQogICAgICAgIC0gdGFnDQogICAgY29tbWFuZHM6DQogICAgICAtIG1rZGlyIC4vdG1wX2ZpbGVzDQogICAgICAtIGZpbmQgLi9yb3RiZCAtbm90IC1pd2hvbGVuYW1lICcqL1wuKicgLXR5cGUgZiAtZXhlYyByc3luYyAtcnYge30gLi90bXBfZmlsZXMgXDsNCiAgICAgIC0gbWtkaXIgLXAgL291dHB1dA0KICAgICAgLSB6aXAgLWogLXIgL291dHB1dC9idW5kbGUuemlwIC4vdG1wX2ZpbGVzDQogICAgICAtIGZpbmQgLXR5cGUgZiAtbmFtZSAnKi5iem4nIC1leGVjIHB5dGhvbjMgfi9iYXR0bGV6b25lL3RtcF9maWxlcy9iem5Eb3duLnB5IHt9IHt9IFw7DQogICAgICAtIHppcCAtaiAtciAvb3V0cHV0L2J1bmRsZTEuNS56aXAgLi90bXBfZmlsZXMNCg0KICBzbmFwc2hvdC1icmFuY2g6DQogICAgaW1hZ2U6IHVidW50dTpsYXRlc3QNCiAgICB3aGVuOg0KICAgICAgZXZlbnQ6DQogICAgICAgIC0gcHVzaA0KICAgIGNvbW1hbmRzOg0KICAgICAgLSBGSUxFX0NPVU5UPSQobHMgL2RlcGxveS8ke0RST05FX0JSQU5DSH0gfCB3YyAtbCkNCiAgICAgIC0gbXYgL2RlcGxveS8ke0RST05FX0JSQU5DSH0vcm90YmRfbGF0ZXN0LnppcCAvZGVwbG95LyR7RFJPTkVfQlJBTkNIfS9yb3RiZF8iJEZJTEVfQ09VTlQiLnppcA0KICAgICAgLSBjcCAvb3V0cHV0L2J1bmRsZS56aXAgL2RlcGxveS8ke0RST05FX0JSQU5DSH0vcm90YmRfbGF0ZXN0LnppcA0KICAgICAgLSBtdiAvZGVwbG95LyR7RFJPTkVfQlJBTkNIfS9yb3RiZF9sYXRlc3QxLjVjLnppcCAvZGVwbG95LyR7RFJPTkVfQlJBTkNIfS9yb3RiZDEuNWNfIiRGSUxFX0NPVU5UIi56aXANCiAgICAgIC0gY3AgL291dHB1dC9idW5kbGUxLjUuemlwIC9kZXBsb3kvJHtEUk9ORV9CUkFOQ0h9L3JvdGJkMS41Y19sYXRlc3QuemlwDQogICAgdm9sdW1lczoNCiAgICAgIC0gL3Jvb3Qvc3R1ZHluYXRvci9uZ2lueC1mcy9wcml2YXRlL3JvdGJkL2J1aWxkcy9kZXBsb3kvYnJhbmNoZXM6L2RlcGxveQ0KDQogIG9sZDoNCiAgICBpbWFnZTogYXBwbGVib3kvZHJvbmUtc3NoDQogICAgaG9zdDogMTg4LjE2Ni42MS4xMDYNCiAgICB1c2VyOiByb290DQogICAgdXNlcm5hbWU6IHJvb3QNCiAgICBwb3J0OiAyMg0KICAgIGtleTogJHtTU0hfS0VZfQ0KICAgIHdoZW46DQogICAgICBldmVudDogDQoNCiAgICBzY3JpcHQ6DQogICAgICAtIGNkIH4vYmF0dGxlem9uZS9yb3RiZA0KICAgICAgLSBnaXQgZmV0Y2gNCiAgICAgIC0gZ2l0IGNoZWNrb3V0ICR7RFJPTkVfQlJBTkNIfQ0KICAgICAgLSBnaXQgcmVzZXQgLS1oYXJkDQogICAgICAtIGdpdCBwdWxsDQogICAgICAtIG1rZGlyIH4vYmF0dGxlem9uZS90bXBfZmlsZXMNCiAgICAgIC0gZmluZCB-L2JhdHRsZXpvbmUvcm90YmQgLW5vdCAtaXdob2xlbmFtZSAnKi9cLionIC10eXBlIGYgLWV4ZWMgcnN5bmMgLXJ2IHt9IH4vYmF0dGxlem9uZS90bXBfZmlsZXMgXDsNCiAgICAgIC0gbWtkaXIgLXAgfi9iYXR0bGV6b25lL2J1aWxkcy8ke0RST05FX0JSQU5DSH0NCiAgICAgIC0gRklMRV9DT1VOVD0kKGxzIH4vYmF0dGxlem9uZS9idWlsZHMvJHtEUk9ORV9CUkFOQ0h9IHwgd2MgLWwpDQogICAgICAtIG12IH4vYmF0dGxlem9uZS9idWlsZHMvJHtEUk9ORV9CUkFOQ0h9L3JvdGJkX2xhdGVzdF8ke0RST05FX1RBR30uemlwIH4vYmF0dGxlem9uZS9idWlsZHMvJHtEUk9ORV9CUkFOQ0h9L3JvdGJkXyIkRklMRV9DT1VOVCJfJHtEUk9ORV9UQUd9LnppcA0KICAgICAgLSB6aXAgLWogLXIgfi9iYXR0bGV6b25lL2J1aWxkcy8ke0RST05FX0JSQU5DSH0vcm90YmRfbGF0ZXN0XyR7RFJPTkVfVEFHfS56aXAgfi9iYXR0bGV6b25lL3RtcF9maWxlcw0KICAgICAgLSBmaW5kIC10eXBlIGYgLW5hbWUgJyouYnpuJyAtZXhlYyBweXRob24zIH4vYmF0dGxlem9uZS90bXBfZmlsZXMvYnpuRG93bi5weSB7fSB7fSBcOw0KICAgICAgLSBtdiB-L2JhdHRsZXpvbmUvYnVpbGRzLyR7RFJPTkVfQlJBTkNIfS9yb3RiZDEuNWNfbGF0ZXN0XyR7RFJPTkVfVEFHfS56aXAgfi9iYXR0bGV6b25lL2J1aWxkcy8ke0RST05FX0JSQU5DSH0vcm90YmQxLjVjXyIkRklMRV9DT1VOVCJfJHtEUk9ORV9UQUd9LnppcA0KICAgICAgLSB6aXAgLWogLXIgfi9iYXR0bGV6b25lL2J1aWxkcy8ke0RST05FX0JSQU5DSH0vcm90YmQxLjVjX2xhdGVzdF8ke0RST05FX1RBR30uemlwIH4vYmF0dGxlem9uZS90bXBfZmlsZXMNCiAgICAgIC0gcm0gLXJmIH4vYmF0dGxlem9uZS90bXBfZmlsZXMNCg0KDQo.Zbw6E57fMoqb4raDR9KqffvkLq-V30XbXCU06YidraQ